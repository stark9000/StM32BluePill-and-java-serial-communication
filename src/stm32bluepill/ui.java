/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stm32bluepill;

import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.NoSuchPortException;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import gnu.io.SerialPortEventListener;
import gnu.io.UnsupportedCommOperationException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.TooManyListenersException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author saliya
 */
public class ui extends javax.swing.JFrame implements SerialPortEventListener {

    private Enumeration portList;
    private CommPortIdentifier portId;
    private SerialPort serialPort;
    private InputStream input;
    private OutputStream output;
    private Thread SCAN_THREAD;
    private Thread PROCESS_THREAD;
    private java.util.List<com.fazecast.jSerialComm.SerialPort> portlist;
    private com.fazecast.jSerialComm.SerialPort ports[];
    private boolean OPENED = false;

    /**
     * Creates new form ui
     */
    public ui() {
        initComponents();
        initx();
    }

    private void initx() {
        try {
            String Default = System.getProperty("user.dir") + System.getProperty("file.separator") + System.mapLibraryName("rxtxSerial");
            System.load(Default);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        BTN_CONNECT.setEnabled(false);
        BTN_DISCONNECT.setEnabled(false);
        portlist = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BTN_SCAN = new javax.swing.JButton();
        CB_PORTS = new javax.swing.JComboBox<>();
        BTN_CONNECT = new javax.swing.JButton();
        BTN_DISCONNECT = new javax.swing.JButton();
        BTN_RELAY = new javax.swing.JToggleButton();
        BTN_BUZZER = new javax.swing.JToggleButton();
        RB_LED1 = new javax.swing.JRadioButton();
        RB_LED2 = new javax.swing.JRadioButton();
        RB_LED4 = new javax.swing.JRadioButton();
        RB_LED3 = new javax.swing.JRadioButton();
        SL_LED = new javax.swing.JSlider();
        jScrollPane2 = new javax.swing.JScrollPane();
        JT_IN = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        LBL_EVENTS = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("STM32 BluePill");
        setResizable(false);

        BTN_SCAN.setText("scan com ports");
        BTN_SCAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SCANActionPerformed(evt);
            }
        });

        CB_PORTS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "none" }));
        CB_PORTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_PORTSActionPerformed(evt);
            }
        });

        BTN_CONNECT.setText("connect");
        BTN_CONNECT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CONNECTActionPerformed(evt);
            }
        });

        BTN_DISCONNECT.setText("disconnect");
        BTN_DISCONNECT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_DISCONNECTActionPerformed(evt);
            }
        });

        BTN_RELAY.setText("Relay ON");
        BTN_RELAY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_RELAYActionPerformed(evt);
            }
        });

        BTN_BUZZER.setText("Buzzer ON");
        BTN_BUZZER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_BUZZERActionPerformed(evt);
            }
        });

        RB_LED1.setText("LED 1");
        RB_LED1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_LED1ActionPerformed(evt);
            }
        });

        RB_LED2.setText("LED 2");
        RB_LED2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_LED2ActionPerformed(evt);
            }
        });

        RB_LED4.setText("LED 4");
        RB_LED4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_LED4ActionPerformed(evt);
            }
        });

        RB_LED3.setText("LED 3");
        RB_LED3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_LED3ActionPerformed(evt);
            }
        });

        SL_LED.setMajorTickSpacing(1);
        SL_LED.setMaximum(4);
        SL_LED.setMinorTickSpacing(1);
        SL_LED.setPaintLabels(true);
        SL_LED.setPaintTicks(true);
        SL_LED.setValue(0);
        SL_LED.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SL_LEDStateChanged(evt);
            }
        });

        JT_IN.setEditable(false);
        JT_IN.setColumns(20);
        JT_IN.setRows(5);
        jScrollPane2.setViewportView(JT_IN);

        jButton2.setText("clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        LBL_EVENTS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LBL_EVENTS.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        LBL_EVENTS.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BTN_RELAY, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BTN_BUZZER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(RB_LED1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RB_LED2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RB_LED3)
                            .addComponent(RB_LED4))
                        .addGap(28, 28, 28)
                        .addComponent(SL_LED, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BTN_SCAN)
                        .addGap(18, 18, 18)
                        .addComponent(CB_PORTS, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BTN_CONNECT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_DISCONNECT))
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addComponent(LBL_EVENTS, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTN_SCAN)
                    .addComponent(CB_PORTS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTN_CONNECT)
                    .addComponent(BTN_DISCONNECT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LBL_EVENTS, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BTN_RELAY)
                            .addComponent(RB_LED1)
                            .addComponent(RB_LED3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BTN_BUZZER)
                            .addComponent(RB_LED2)
                            .addComponent(RB_LED4)))
                    .addComponent(SL_LED, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BTN_SCANActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SCANActionPerformed
        SCAN_THREAD = new Thread(() -> {
            CB_PORTS.removeAllItems();
            CB_PORTS.setEnabled(false);
            BTN_SCAN.setEnabled(false);
            BTN_CONNECT.setEnabled(false);
            BTN_DISCONNECT.setEnabled(false);
            LBL_EVENTS.setText("Scanning ....");
            portList = CommPortIdentifier.getPortIdentifiers();
            while (portList.hasMoreElements()) {
                portId = (CommPortIdentifier) portList.nextElement();
                if (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {
                    CB_PORTS.addItem(portId.getName());
                }
            }
            ports = com.fazecast.jSerialComm.SerialPort.getCommPorts();
            for (com.fazecast.jSerialComm.SerialPort port : ports) {
                if (!portlist.contains(port)) {
                    portlist.add(port);
                }
            }
            CB_PORTS.setEnabled(true);
            LBL_EVENTS.setText("Scanning finished.");
            BTN_SCAN.setEnabled(true);
            if (CB_PORTS.getItemCount() <= 0) {
                CB_PORTS.addItem("none");
            }
            if (!"none".equals(CB_PORTS.getSelectedItem().toString())) {
                BTN_CONNECT.setEnabled(true);
            }
            SCAN_THREAD.interrupt();
            SCAN_THREAD = null;
        });
        SCAN_THREAD.start();
    }//GEN-LAST:event_BTN_SCANActionPerformed

    private void CB_PORTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_PORTSActionPerformed
        if (CB_PORTS.getSelectedItem() != "none" || CB_PORTS.getSelectedItem() != "") {
            portlist.stream().filter((port) -> (CB_PORTS.getSelectedItem().toString().equals(port.getSystemPortName()))).forEachOrdered((port) -> {
                LBL_EVENTS.setText(port.getDescriptivePortName());
            });
        }
    }//GEN-LAST:event_CB_PORTSActionPerformed

    private void BTN_CONNECTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CONNECTActionPerformed
        LBL_EVENTS.setText("Connecting...");
        CommPortIdentifier portIdentifier = null;
        try {
            portIdentifier = CommPortIdentifier.getPortIdentifier(CB_PORTS.getSelectedItem().toString());
            CommPort commPort = portIdentifier.open(this.getClass().getName(), 2000);
            if (commPort instanceof SerialPort) {
                serialPort = (SerialPort) commPort;
                serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);
                input = serialPort.getInputStream();
                output = serialPort.getOutputStream();
                serialPort.addEventListener(this);
                serialPort.notifyOnDataAvailable(true);
                LBL_EVENTS.setText("Connected.");
                OPENED = true;
                BTN_CONNECT.setEnabled(false);
                BTN_DISCONNECT.setEnabled(true);
                input = serialPort.getInputStream();
                output = serialPort.getOutputStream();
            } else {
                LBL_EVENTS.setText("cannot Connect !");
            }
        } catch (PortInUseException | NoSuchPortException | UnsupportedCommOperationException | IOException | TooManyListenersException ex) {
            Logger.getLogger(ui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BTN_CONNECTActionPerformed

    private void BTN_DISCONNECTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_DISCONNECTActionPerformed
        if (serialPort != null) {
            LBL_EVENTS.setText("disconnecting...");
            serialPort.close();
            BTN_CONNECT.setEnabled(true);
            BTN_DISCONNECT.setEnabled(false);
            LBL_EVENTS.setText("disconnected.");
        }
    }//GEN-LAST:event_BTN_DISCONNECTActionPerformed

    private void BTN_RELAYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_RELAYActionPerformed
        if (BTN_RELAY.isSelected()) {
            BTN_RELAY.setText("Relay OFF");
            sendCommand("relayon");
        } else {
            BTN_RELAY.setText("Relay ON");
            sendCommand("relayoff");
        }
    }//GEN-LAST:event_BTN_RELAYActionPerformed

    private void BTN_BUZZERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_BUZZERActionPerformed
        if (BTN_BUZZER.isSelected()) {
            BTN_BUZZER.setText("Buzzer OFF");
            sendCommand("buzzeron");
        } else {
            BTN_BUZZER.setText("Buzzer ON");
            sendCommand("buzzeroff");
        }
    }//GEN-LAST:event_BTN_BUZZERActionPerformed

    private void RB_LED1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_LED1ActionPerformed
        if (RB_LED1.isSelected()) {
            sendCommand("led1on");
        } else {
            sendCommand("led1off");
        }
    }//GEN-LAST:event_RB_LED1ActionPerformed

    private void RB_LED2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_LED2ActionPerformed
        if (RB_LED2.isSelected()) {
            sendCommand("led2on");
        } else {
            sendCommand("led2off");
        }
    }//GEN-LAST:event_RB_LED2ActionPerformed

    private void RB_LED4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_LED4ActionPerformed
        if (RB_LED4.isSelected()) {
            sendCommand("led4on");
        } else {
            sendCommand("led4off");
        }
    }//GEN-LAST:event_RB_LED4ActionPerformed

    private void RB_LED3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_LED3ActionPerformed
        if (RB_LED3.isSelected()) {
            sendCommand("led3on");
        } else {
            sendCommand("led3off");
        }
    }//GEN-LAST:event_RB_LED3ActionPerformed

    private void SL_LEDStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SL_LEDStateChanged
        switch (SL_LED.getValue()) {
            case 0:
                sendCommand("led5off");
                sendCommand("led6off");
                sendCommand("led7off");
                sendCommand("led8off");
                break;
            case 1:
                sendCommand("led5on");
                sendCommand("led6off");
                sendCommand("led7off");
                sendCommand("led8off");
                break;
            case 2:
                sendCommand("led5on");
                sendCommand("led6on");
                sendCommand("led7off");
                sendCommand("led8off");
                break;
            case 3:
                sendCommand("led5on");
                sendCommand("led6on");
                sendCommand("led7on");
                sendCommand("led8off");
                break;
            case 4:
                sendCommand("led5on");
                sendCommand("led6on");
                sendCommand("led7on");
                sendCommand("led8on");
                break;
            default:
                break;
        }
    }//GEN-LAST:event_SL_LEDStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JT_IN.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ui().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton BTN_BUZZER;
    private javax.swing.JButton BTN_CONNECT;
    private javax.swing.JButton BTN_DISCONNECT;
    private javax.swing.JToggleButton BTN_RELAY;
    private javax.swing.JButton BTN_SCAN;
    private javax.swing.JComboBox<String> CB_PORTS;
    private javax.swing.JTextArea JT_IN;
    private javax.swing.JLabel LBL_EVENTS;
    private javax.swing.JRadioButton RB_LED1;
    private javax.swing.JRadioButton RB_LED2;
    private javax.swing.JRadioButton RB_LED3;
    private javax.swing.JRadioButton RB_LED4;
    private javax.swing.JSlider SL_LED;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    String RX_STRING = "";

    @Override
    public void serialEvent(gnu.io.SerialPortEvent spe) {
        if (spe.getEventType() == gnu.io.SerialPortEvent.DATA_AVAILABLE) {
            try {
                int RX_CHAR = input.read();
                if (RX_CHAR == '\r' || RX_CHAR == '\n') {
                    Process(RX_STRING);
                }
                RX_STRING = RX_STRING + (char) RX_CHAR;

            } catch (IOException ex) {
                Logger.getLogger(ui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void sendCommand(String command) {
        if (OPENED) {
            try {
                output.write((command + "\n").getBytes(Charset.forName("UTF-8")));
                output.flush();
            } catch (IOException ex) {
                Logger.getLogger(ui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void Process(String serialString) {
        PROCESS_THREAD = new Thread(() -> {
            JT_IN.append(serialString + "\n");
            JT_IN.setCaretPosition(JT_IN.getDocument().getLength());
            RX_STRING = "";
        });
        PROCESS_THREAD.start();
    }
}
